{"ast":null,"code":"// App.js\nimport logo from'../assets/TodoLogo.png';import'./Main.css';import TaskForm from'./TaskForm';import React,{useState,useEffect}from'react';import Task from'./Task';import{colorCodes}from'../assets/colorCodes';// Importing colorCodes from colors.js\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Main=_ref=>{let{setIsLoggedIn}=_ref;const[isModalOpen,setIsModalOpen]=useState(false);const toggleModal=()=>{setIsModalOpen(!isModalOpen);};const handleLogout=()=>{localStorage.removeItem('username');localStorage.removeItem('password');setIsLoggedIn(false);// Assuming you have a state variable named isLoggedIn\n};const getRandomColor=()=>colorCodes[Math.floor(Math.random()*colorCodes.length)];const[tasks,setTasks]=useState(()=>{// Load tasks from local storage when the component mounts\nconst savedTasks=localStorage.getItem('tasks');return savedTasks?JSON.parse(savedTasks):[];});console.log(tasks);const[currentTask,setCurrentTask]=useState({title:'',description:''});const[isEditing,setIsEditing]=useState(false);const[filter,setFilter]=useState('All');useEffect(()=>{// Save tasks to local storage whenever they change\ntry{localStorage.setItem('tasks',JSON.stringify(tasks));}catch(error){console.error('Failed to save tasks to local storage:',error);}},[tasks]);const addTask=task=>{const storedUsername=localStorage.getItem('username');if(storedUsername){setTasks([...tasks,{...task,id:Date.now(),completed:false,date:Date.now(),username:storedUsername}]);setIsModalOpen(false);}};const updateTask=task=>{setTasks(tasks.map(t=>t.id===task.id?task:t));setIsEditing(false);setIsModalOpen(false);};const deleteTask=taskId=>{setTasks(tasks.filter(task=>task.id!==taskId));};const markTaskCompleted=taskId=>{setTasks(tasks.map(task=>task.id===taskId?{...task,completed:!task.completed}:task));};const filteredTasks=tasks.filter(task=>{const storedUsername=localStorage.getItem('username');if(storedUsername){if(filter==='Completed'){return task.completed&&task.username===storedUsername;}else if(filter==='Active'){return!task.completed&&task.username===storedUsername;}else{return task.username===storedUsername;}}});return/*#__PURE__*/_jsxs(\"div\",{className:\"main\",children:[/*#__PURE__*/_jsx(\"img\",{src:logo,className:\"logo\",alt:\"Todo Logo\"}),/*#__PURE__*/_jsx(\"button\",{className:\"logoutBtn\",onClick:handleLogout,children:\"Logout\"}),\" \",/*#__PURE__*/_jsxs(\"div\",{className:\"filter-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setFilter('All'),className:filter==='All'?'active':'',children:\"All Tasks\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setFilter('Completed'),className:filter==='Completed'?'active':'',children:\"Completed Tasks\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setFilter('Active'),className:filter==='Active'?'active':'',children:\"Active Tasks\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"taskItems\",children:filteredTasks.map(task=>/*#__PURE__*/_jsx(Task,{task:task,setCurrentTask:setCurrentTask,setIsEditing:setIsEditing,deleteTask:deleteTask,markTaskCompleted:markTaskCompleted,setIsModalOpen:setIsModalOpen,color:getRandomColor()},task.id))}),/*#__PURE__*/_jsx(\"button\",{className:\"addTaskBtn\",onClick:toggleModal,children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",fill:\"none\",viewBox:\"0 0 24 24\",strokeWidth:3,stroke:\"currentColor\",className:\"w-6 h-6\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M12 4.5v15m7.5-7.5h-15\"})})}),isModalOpen&&/*#__PURE__*/_jsx(\"div\",{className:\"modal\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"closeTaskBtn\",onClick:toggleModal,children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",fill:\"none\",viewBox:\"0 0 24 24\",strokeWidth:1.2,stroke:\"currentColor\",className:\"w-6 h-6\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M6 18 18 6M6 6l12 12\"})})}),/*#__PURE__*/_jsx(\"img\",{src:logo,className:\"logo1\",alt:\"Todo Logo\"}),/*#__PURE__*/_jsx(TaskForm,{addTask:addTask,updateTask:updateTask,currentTask:currentTask,setCurrentTask:setCurrentTask,isEditing:isEditing,setIsEditing:setIsEditing,setIsModalOpen:setIsModalOpen})]})})]});};export default Main;","map":{"version":3,"names":["logo","TaskForm","React","useState","useEffect","Task","colorCodes","jsx","_jsx","jsxs","_jsxs","Main","_ref","setIsLoggedIn","isModalOpen","setIsModalOpen","toggleModal","handleLogout","localStorage","removeItem","getRandomColor","Math","floor","random","length","tasks","setTasks","savedTasks","getItem","JSON","parse","console","log","currentTask","setCurrentTask","title","description","isEditing","setIsEditing","filter","setFilter","setItem","stringify","error","addTask","task","storedUsername","id","Date","now","completed","date","username","updateTask","map","t","deleteTask","taskId","markTaskCompleted","filteredTasks","className","children","src","alt","onClick","color","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d"],"sources":["D:/SHEFALI_FREELANCE/taskManagement/src/components/Main.js"],"sourcesContent":["// App.js\r\nimport logo from '../assets/TodoLogo.png';\r\nimport './Main.css';\r\nimport TaskForm from './TaskForm';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Task from './Task';\r\nimport { colorCodes } from '../assets/colorCodes'; // Importing colorCodes from colors.js\r\n\r\nconst Main = ({ setIsLoggedIn }) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const toggleModal = () => {\r\n        setIsModalOpen(!isModalOpen);\r\n    };\r\n\r\n\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('username');\r\n        localStorage.removeItem('password');\r\n        setIsLoggedIn(false); // Assuming you have a state variable named isLoggedIn\r\n    };\r\n\r\n\r\n    const getRandomColor = () => colorCodes[Math.floor(Math.random() * colorCodes.length)];\r\n\r\n    const [tasks, setTasks] = useState(() => {\r\n        // Load tasks from local storage when the component mounts\r\n        const savedTasks = localStorage.getItem('tasks');\r\n        return savedTasks ? JSON.parse(savedTasks) : [];\r\n    });\r\n\r\n\r\n\r\n    console.log(tasks)\r\n    const [currentTask, setCurrentTask] = useState({ title: '', description: '' });\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [filter, setFilter] = useState('All');\r\n\r\n    useEffect(() => {\r\n        // Save tasks to local storage whenever they change\r\n        try {\r\n            localStorage.setItem('tasks', JSON.stringify(tasks));\r\n        } catch (error) {\r\n            console.error('Failed to save tasks to local storage:', error);\r\n        }\r\n    }, [tasks]);\r\n\r\n    const addTask = (task) => {\r\n        const storedUsername = localStorage.getItem('username');\r\n\r\n        if (storedUsername) {\r\n            setTasks([...tasks, { ...task, id: Date.now(), completed: false, date: Date.now(), username: storedUsername }]);\r\n            setIsModalOpen(false)\r\n\r\n        }\r\n    };\r\n\r\n    const updateTask = (task) => {\r\n        setTasks(tasks.map(t => t.id === task.id ? task : t));\r\n        setIsEditing(false);\r\n        setIsModalOpen(false)\r\n    };\r\n\r\n    const deleteTask = (taskId) => {\r\n        setTasks(tasks.filter(task => task.id !== taskId));\r\n    };\r\n\r\n    const markTaskCompleted = (taskId) => {\r\n        setTasks(tasks.map(task => task.id === taskId ? { ...task, completed: !task.completed } : task));\r\n    };\r\n\r\n    const filteredTasks = tasks.filter(task => {\r\n        const storedUsername = localStorage.getItem('username');\r\n\r\n        if (storedUsername) {\r\n            if (filter === 'Completed') {\r\n                return task.completed && task.username === storedUsername;\r\n            } else if (filter === 'Active') {\r\n                return !task.completed && task.username === storedUsername;\r\n            } else {\r\n                return task.username === storedUsername;\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <img src={logo} className=\"logo\" alt=\"Todo Logo\" />\r\n            <button className=\"logoutBtn\" onClick={handleLogout}>Logout</button> {/* Add this button */}\r\n            <div className=\"filter-buttons\">\r\n                <button onClick={() => setFilter('All')} className={filter === 'All' ? 'active' : ''}>All Tasks</button>\r\n                <button onClick={() => setFilter('Completed')} className={filter === 'Completed' ? 'active' : ''}>Completed Tasks</button>\r\n                <button onClick={() => setFilter('Active')} className={filter === 'Active' ? 'active' : ''}>Active Tasks</button>\r\n            </div>\r\n\r\n            <div className='taskItems'>\r\n                {filteredTasks.map(task => (\r\n                    <Task\r\n                        key={task.id}\r\n                        task={task}\r\n                        setCurrentTask={setCurrentTask}\r\n                        setIsEditing={setIsEditing}\r\n                        deleteTask={deleteTask}\r\n                        markTaskCompleted={markTaskCompleted}\r\n                        setIsModalOpen={setIsModalOpen}\r\n                        color={getRandomColor()}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <button className=\"addTaskBtn\" onClick={toggleModal}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={3} stroke=\"currentColor\" className=\"w-6 h-6\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\r\n                </svg>\r\n            </button>\r\n\r\n            {isModalOpen && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <button className=\"closeTaskBtn\" onClick={toggleModal}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.2} stroke=\"currentColor\" className=\"w-6 h-6\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\r\n                            </svg>\r\n                        </button>\r\n                        <img src={logo} className=\"logo1\" alt=\"Todo Logo\" />\r\n                        <TaskForm\r\n                            addTask={addTask}\r\n                            updateTask={updateTask}\r\n                            currentTask={currentTask}\r\n                            setCurrentTask={setCurrentTask}\r\n                            isEditing={isEditing}\r\n                            setIsEditing={setIsEditing}\r\n                            setIsModalOpen={setIsModalOpen}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}