{"ast":null,"code":"var _jsxFileName = \"D:\\\\SHEFALI_FREELANCE\\\\taskManagement\\\\src\\\\components\\\\Main.js\",\n  _s = $RefreshSig$();\n// App.js\nimport logo from './assets/TodoLogo.png';\nimport './App.css';\nimport TaskForm from './TaskForm';\nimport React, { useState, useEffect } from 'react';\nimport Task from './Task';\nimport { colorCodes } from '../assets/colorCodes'; // Importing colorCodes from colors.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n  const getRandomColor = () => colorCodes[Math.floor(Math.random() * colorCodes.length)];\n  const [tasks, setTasks] = useState(() => {\n    // Load tasks from local storage when the component mounts\n    const savedTasks = localStorage.getItem('tasks');\n    return savedTasks ? JSON.parse(savedTasks) : [];\n  });\n  const [currentTask, setCurrentTask] = useState({\n    title: '',\n    description: ''\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [filter, setFilter] = useState('All');\n  useEffect(() => {\n    // Save tasks to local storage whenever they change\n    try {\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    } catch (error) {\n      console.error('Failed to save tasks to local storage:', error);\n    }\n  }, [tasks]);\n  const addTask = task => {\n    setTasks([...tasks, {\n      ...task,\n      id: Date.now(),\n      completed: false,\n      date: Date.now()\n    }]);\n    setIsModalOpen(false);\n  };\n  const updateTask = task => {\n    setTasks(tasks.map(t => t.id === task.id ? task : t));\n    setIsEditing(false);\n    setIsModalOpen(false);\n  };\n  const deleteTask = taskId => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n  const markTaskCompleted = taskId => {\n    setTasks(tasks.map(task => task.id === taskId ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'Completed') {\n      return task.completed;\n    } else if (filter === 'Active') {\n      return !task.completed;\n    } else {\n      return true;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      className: \"logo\",\n      alt: \"Todo Logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFilter('All'),\n        className: filter === 'All' ? 'active' : '',\n        children: \"All Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFilter('Completed'),\n        className: filter === 'Completed' ? 'active' : '',\n        children: \"Completed Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFilter('Active'),\n        className: filter === 'Active' ? 'active' : '',\n        children: \"Active Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskItems\",\n      children: filteredTasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        setCurrentTask: setCurrentTask,\n        setIsEditing: setIsEditing,\n        deleteTask: deleteTask,\n        markTaskCompleted: markTaskCompleted,\n        setIsModalOpen: setIsModalOpen,\n        color: getRandomColor()\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addTaskBtn\",\n      onClick: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        strokeWidth: 3,\n        stroke: \"currentColor\",\n        className: \"w-6 h-6\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          d: \"M12 4.5v15m7.5-7.5h-15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"closeTaskBtn\",\n          onClick: toggleModal,\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            strokeWidth: 1.2,\n            stroke: \"currentColor\",\n            className: \"w-6 h-6\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              d: \"M6 18 18 6M6 6l12 12\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"logo1\",\n          alt: \"Todo Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n          addTask: addTask,\n          updateTask: updateTask,\n          currentTask: currentTask,\n          setCurrentTask: setCurrentTask,\n          isEditing: isEditing,\n          setIsEditing: setIsEditing,\n          setIsModalOpen: setIsModalOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"CKFDzr/7oTo2B5Z7BPDCCD9bi/k=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["logo","TaskForm","React","useState","useEffect","Task","colorCodes","jsxDEV","_jsxDEV","Main","_s","isModalOpen","setIsModalOpen","toggleModal","getRandomColor","Math","floor","random","length","tasks","setTasks","savedTasks","localStorage","getItem","JSON","parse","currentTask","setCurrentTask","title","description","isEditing","setIsEditing","filter","setFilter","setItem","stringify","error","console","addTask","task","id","Date","now","completed","date","updateTask","map","t","deleteTask","taskId","markTaskCompleted","filteredTasks","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","color","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","_c","$RefreshReg$"],"sources":["D:/SHEFALI_FREELANCE/taskManagement/src/components/Main.js"],"sourcesContent":["// App.js\r\nimport logo from './assets/TodoLogo.png';\r\nimport './App.css';\r\nimport TaskForm from './TaskForm';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Task from './Task';\r\nimport { colorCodes } from '../assets/colorCodes'; // Importing colorCodes from colors.js\r\n\r\nconst Main = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const toggleModal = () => {\r\n    setIsModalOpen(!isModalOpen);\r\n  };\r\n\r\n  const getRandomColor = () => colorCodes[Math.floor(Math.random() * colorCodes.length)];\r\n\r\n  const [tasks, setTasks] = useState(() => {\r\n    // Load tasks from local storage when the component mounts\r\n    const savedTasks = localStorage.getItem('tasks');\r\n    return savedTasks ? JSON.parse(savedTasks) : [];\r\n  });\r\n  const [currentTask, setCurrentTask] = useState({ title: '', description: '' });\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [filter, setFilter] = useState('All');\r\n\r\n  useEffect(() => {\r\n    // Save tasks to local storage whenever they change\r\n    try {\r\n      localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    } catch (error) {\r\n      console.error('Failed to save tasks to local storage:', error);\r\n    }\r\n  }, [tasks]);\r\n\r\n  const addTask = (task) => {\r\n    setTasks([...tasks, { ...task, id: Date.now(), completed: false, date: Date.now()}]);\r\n    setIsModalOpen(false)\r\n  };\r\n\r\n  const updateTask = (task) => {\r\n    setTasks(tasks.map(t => t.id === task.id ? task : t));\r\n    setIsEditing(false);\r\n    setIsModalOpen(false)\r\n  };\r\n\r\n  const deleteTask = (taskId) => {\r\n    setTasks(tasks.filter(task => task.id !== taskId));\r\n  };\r\n\r\n  const markTaskCompleted = (taskId) => {\r\n    setTasks(tasks.map(task => task.id === taskId ? { ...task, completed: !task.completed } : task));\r\n  };\r\n\r\n  const filteredTasks = tasks.filter(task => {\r\n    if (filter === 'Completed') {\r\n      return task.completed;\r\n    } else if (filter === 'Active') {\r\n      return !task.completed;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <img src={logo} className=\"logo\" alt=\"Todo Logo\" />\r\n\r\n      <div className=\"filter-buttons\">\r\n        <button onClick={() => setFilter('All')} className={filter === 'All' ? 'active' : ''}>All Tasks</button>\r\n        <button onClick={() => setFilter('Completed')} className={filter === 'Completed' ? 'active' : ''}>Completed Tasks</button>\r\n        <button onClick={() => setFilter('Active')} className={filter === 'Active' ? 'active' : ''}>Active Tasks</button>\r\n      </div>\r\n\r\n      <div className='taskItems'>\r\n        {filteredTasks.map(task => (\r\n          <Task\r\n            key={task.id}\r\n            task={task}\r\n            setCurrentTask={setCurrentTask}\r\n            setIsEditing={setIsEditing}\r\n            deleteTask={deleteTask}\r\n            markTaskCompleted={markTaskCompleted}\r\n            setIsModalOpen={setIsModalOpen}\r\n            color={getRandomColor()}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <button className=\"addTaskBtn\" onClick={toggleModal}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={3} stroke=\"currentColor\" className=\"w-6 h-6\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\r\n        </svg>\r\n      </button>\r\n\r\n      {isModalOpen && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <button className=\"closeTaskBtn\" onClick={toggleModal}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.2} stroke=\"currentColor\" className=\"w-6 h-6\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\r\n              </svg>\r\n            </button>\r\n            <img src={logo} className=\"logo1\" alt=\"Todo Logo\" />\r\n            <TaskForm\r\n              addTask={addTask}\r\n              updateTask={updateTask}\r\n              currentTask={currentTask}\r\n              setCurrentTask={setCurrentTask}\r\n              isEditing={isEditing}\r\n              setIsEditing={setIsEditing}\r\n              setIsModalOpen={setIsModalOpen}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}